@startuml

class SkeletonEventBindingFactory<SampleType>{
    +Create(InstanceIdentifier, SkeletonBase& parent, std::string event_name): SkeletonEventBinding
}

class SkeletonFieldBindingFactory<SampleType>{
    +CreateEventBinding(InstanceIdentifier, SkeletonBase& parent, std::string field_name): SkeletonEventBinding
}

class SkeletonEventBinding<SampleType> {
    +Send(SampleType const&) = 0 : void
    +Send(SampleAllocateePtr<SampleType>) = 0: void
    +Allocate() = 0 : SampleAllocateePtr<SampleType>
    +GetMaxSize() : std::size_t
}

abstract class "SkeletonEventBindingBase" as SkeletonEventBindingBase {
    +PrepareOffer() = 0: score::ResultBlank
    +PrepareStopOffer() = 0: void
    +GetMaxSize() = 0: std::size_t
}

class "score::mw::com::impl::SkeletonEvent<SampleType>" as SkeletonEvent {
    +SkeletonEvent(SkeletonBase& parent, std::string event_name)
    +Send(SampleType const&): void
    +Send(SampleAllocateePtr<SampleType>): void
    +Allocate(): SampleAllocateePtr<SampleType>
}

abstract class "score::mw::com::impl::SkeletonBase" as SkeletonBase {
    #binding_ : std::unique_ptr<SkeletonBinding>
    #events_ : SkeletonEvents
    #fields_ : SkeletonFields
    #instance_id_ : InstanceIdentifier
    using SkeletonEvents = std::unordered_map<score::cpp::string_view, SkeletonEventBase&>
    --
    +SkeletonBase(std::unique_ptr<SkeletonBinding>, InstanceIdentifier, MethodCallProcessingMode)
    +OfferService() : void
    +StopOfferService(): void
    --
    Notes:
    SkeletonBase is moveable but not copyable. On moving, the SkeletonBase should call
    UpdateSkeletonReference on all events and fields within its events_ and fields_ maps.
}

class SkeletonBinding {
    using SkeletonEventBindings = std::unordered_map<score::cpp::string_view, SkeletonEventBindingBase&>
    using SkeletonFieldBindings = std::unordered_map<score::cpp::string_view, std::tuple<SkeletonEventBindingBase&,
    SkeletonServiceMethodBinding, SkeletonServiceMethodBindingÂ»
    --
    +PrepareOffer(SkeletonEventBindings&, SkeletonFieldBindings&) = 0 : ResultBlank
    +PrepareStopOffer() = 0 : void
    --
    Notes:
    SkeletonBinding is not moveable or copyable.
}

class SkeletonBindingFactory {
    +Create(InstanceIdentifierView instanceId, SkeletonEvents&): std::unique_ptr<SkeletonBinding>
    +InjectMockBinding(SkeletonBinding* mock_skeleton_binding):void
}

class "score::mw::com::impl::SkeletonField<SampleType>" as SkeletonField {
    -skeleton_service_method_dispatch_get_: SkeletonServiceMethod<Future<SampleType>, void>
    -skeleton_service_method_dispatch_set_: SkeletonServiceMethod <void, SampleType>

    +SkeletonField(SkeletonBase& parent, std::string field_name)
    +Update(const SampleType& data): ResultBlank
    +Update(SampleAllocateePtr<SampleType>): ResultBlank
    +Allocate(): SampleAllocateePtr<SampleType>
    +RegisterGetHandler(std::function<Future<SampleType>()> getHandler): Result<void>
    +RegisterSetHandler(std::function<Future<SampleType>(const SampleType& data)> setHandler):Result<void>

    -IsInitialValueSaved(): bool
    -DoDeferredUpdate(): ResultBlank

    --
    SkeletonField will dispatch update call to impl::skeletonEvent via skeleton_event_dispatch_. On moving, the
    SkeletonField should call UpdateField on its parent skeleton so that the parent stores its new address.
}

abstract class "score::mw::com::impl::SkeletonFieldBase" as SkeletonFieldBase {
    #skeleton_event_dispatch_ : std::unique_ptr<impl::SkeletonEventBase>
    #skeleton_base_ : std::reference_wrapper<SkeletonBase>
    #field_name_ : score::cpp::string_view
    #was_prepare_offer_called_ : bool

    -is_initial_value_set_: bool

    +SkeletonFieldBase(SkeletonBase&, score::cpp::string_view field_name, std::unique_ptr<impl::SkeletonEventBase>)
    +SkeletonFieldBase(SkeletonBase&, score::cpp::string_view field_name, std::unique_ptr<impl::SkeletonEventBase>)
    +PrepareOffer(): ResultBlank
    +PrepareStopOffer(): void
    +UpdateSkeletonReference(SkeletonBase& base_skeleton): void

    -IsInitialValueSaved(): bool = 0
    -DoDeferredUpdate(): ResultBlank = 0
    --
    In production, the constructor receives a SkeletonEvent<SampleType> from impl::SkeletonField which is
    assigned to the base class pointer, skeleton_event_dispatch_.
    This allows BaseSkeletonField to access the type independent methods of SkeletonEventBase.
    Derived classes i.e. impl::SkeletonField should downcast skeleton_event_dispatch_ to a
    SkeletonEvent<SampleType> in order to use type dependent methods.
}

class "score::mw::com::impl::SkeletonEventBase" as SkeletonEventBase {
    -binding_: std::unique_ptr<SkeletonEventBindingBase>
    +SkeletonEventBase(std::unique_ptr<SkeletonEventBindingBase> binding)
    +PrepareOffer(): score::ResultBlank
    +PrepareStopOffer(): void
    +UpdateSkeletonReference(SkeletonBase& base_skeleton): void

    --
    Notes:
    SkeletonEventBase is moveable but not copyable.
    In production, the constructor receives a SkeletonEventBinding<SampleType>
    from impl::SkeletonEvent which is assigned to the base class pointer, binding_.
    This allows SkeletonEventBase to access the type independent methods of
    SkeletonEventBindingBase. Derived classes i.e. impl::SkeletonEvent should
    downcast binding_ to a SkeletonEventBinding<SampleType> in order to use type
    dependent methods. On moving, the SkeletonEvent should call UpdateEvent on its
    parent skeleton so that the parent stores its new address.
}

class SkeletonServiceMethodBinding <InArgs, OutArgs> {
}
class SkeletonEventBindingFactory <SampleType> {

}


class "SkeletonServiceMethod" as SkeletonServiceMethod <InArgs, OutArgs>{
    +RegisterCallHandler(std::function<OutArgs(InArgs...)>): Result<void>
    --

    Notes:
    SkeletonServiceMethod will have partial template specialization for InArgs
}

class DummySkeleton <<generated>> {
    +Create(InstanceSpecifier, MethodCallProcessingMode) : Result<DummySkeleton>
    +Create(InstanceIdentifier, MethodCallProcessingMode) : Result<DummySkeleton>
    +DummyEvent : events::DummyEvent // using events::DummyEvent = SkeletonEvent<SampleType>
    +DummyField : fields::DummyField // using fields::DummyField = SkeletonField<SampleType>
}

class "lola::Skeleton" as lola_Skeleton {
    Skeleton(InstanceIdentifier, SkeletonEvents&)
    +PrepareOffer(SkeletonBinding::SkeletonEventBindings&, SkeletonBinding::SkeletonFieldBindings&): ResultBlank
    +PrepareStopOffer(): void

    template <typename SampleType>
    +Register(ElementFqId, size_t num_slots): std::pair<EventDataStorage<SampleType>*,EventDataControlComposite>
}

class "lola::SkeletonEvent<SampleType>" as lola_SkeletonEvent {
    +SkeletonEvent(SkeletonBase& parent, ElementFqId, score::cpp::string_view event_name, size_t max_number_slots, bool enforce_max_samples = true)
    +Send(SampleType const&): void
    +Send(SampleAllocateePtr<SampleType>): void
    +Allocate(): SampleAllocateePtr<SampleType>
    +PrepareOffer(): score::ResultBlank
    +PrepareStopOffer(): void
}

class "score::memory::shared::SharedMemoryFactory()" as shmfactory {
}

SkeletonBase --> SkeletonBindingFactory #blue;text:blue : uses
SkeletonEvent --> SkeletonBase #blue;text:blue : uses
SkeletonEvent -u-> SkeletonEventBindingFactory #blue;text:blue : uses
SkeletonField --> SkeletonBase #blue;text:blue : uses
SkeletonField -up-> SkeletonFieldBindingFactory #blue;text:blue : uses
SkeletonEventBinding <-- SkeletonEvent #blue;text:blue : uses

lola_Skeleton --> shmfactory #darkorange;text:darkorange : uses for shm_object creation

SkeletonBindingFactory -u-> SkeletonBinding #red;text:red : creates
SkeletonEventBindingFactory -l-> SkeletonEventBinding #red;text:red : creates
SkeletonFieldBindingFactory -r-> SkeletonEventBinding #red;text:red : creates

SkeletonBase ..> SkeletonEventBase : knows
SkeletonBinding ..> SkeletonEventBindingBase :knows

DummySkeleton *-- "0..n" SkeletonField
SkeletonBase "1" *-r- "1" SkeletonBinding
SkeletonFieldBase "1" *-r- SkeletonEventBase : event_dispatch_
SkeletonField "0..2" *-l- SkeletonServiceMethod
SkeletonServiceMethod *-- "1" SkeletonServiceMethodBinding

DummySkeleton --|> SkeletonBase
SkeletonEvent --|> SkeletonEventBase
SkeletonEventBinding <|-u- lola_SkeletonEvent
SkeletonEventBindingBase <|-- SkeletonEventBinding
SkeletonFieldBase <|-- SkeletonField
SkeletonServiceMethod -d-|> SkeletonServiceMethodBinding
lola_Skeleton -d-|> SkeletonBinding

SkeletonEventBase *-- SkeletonEventBindingBase

SkeletonEvent -up[hidden]-> SkeletonEventBindingFactory
SkeletonBase -[hidden]- SkeletonField
SkeletonField -[hidden]-> SkeletonFieldBase
lola_SkeletonEvent -r[hidden]-> lola_Skeleton



@enduml
