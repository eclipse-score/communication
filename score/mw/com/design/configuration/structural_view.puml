@startuml structural_view_configuration
title "Structural View Configuration"

package "configuration" {

  enum QualityType {
    kInvalid = 0x00
    ASIL_QM = 0x01
    ASIL_B = 0x02
  }

  class "score::mw::com::ServiceVersionType" {
    - major: std::uint32_t const
    - minor: std::uint32_t const
    + operator==()
    + operator<()
    + ToString()
  }

  class "score::mw::com::ServiceIdentifierType" {
    + version: ServiceVersionType const&
    - name: std::string const
    + ServiceIdentifierType(std:string const &name)
    + operator==()
    + operator<()
    + ToString() : std::string const&
  }

  class "score::mw::com::impl::SomeIpServiceInstanceDeployment" {
    + instanceId: score::cpp::optional<std::uint16_t> const
    + ToString() const : std::string
  }

  class "score::mw::com::impl::LolaServiceInstanceDeployment" {
    + events : std::unordered_map<std::string, LolaEventInstanceDeployment> const
    + fields : std::unordered_map<std::string, LolaFieldInstanceDeployment> const
    + instanceId : score::cpp::optional<std::uint16_t>
    + shared_memory_size : score::cpp::optional<std::size_t>
    + allowed_consumer : std::unordered_map<QualityType, std::vector<uid_t>>
    + allowed_provider : std::unordered_map<QualityType, std::vector<uid_t>>
    + LolaServiceInstanceDeployment(instance_id : std::uint16_t, events: EventInstanceMapping)
    + ToString() : std::string const
    + Contains(event_name : const std::string&): bool
  }

  class "score::mw::com::impl::ServiceInstanceDeployment" {
    + service: ServiceIdentifierType
    + asilLevel: QualityType
    + bindingInfo_ : std::variant<LolaServiceInstanceDeployment, SomeIpServiceInstanceDeployment, FakeBindingInformation, score::cpp::blank> const
    + ServiceInstanceDeployment(service : ServiceIdentifierType const, binding : BindingInformation, asil_level: QualityType const)
    + ToString() : std::string const
  }

  class "score::mw::com::impl::LolaEventInstanceDeployment" {
    + max_samples_: std::uint16_t
    + max_subscribers_: std::uint8_t
    + enforce_max_samples_ : score::cpp::optional<bool>
  }

  class "score::mw::com::impl::LolaFieldInstanceDeployment" {
    + max_samples_: std::uint16_t
    + max_subscribers_: std::uint8_t
    + enforce_max_samples_ : score::cpp::optional<bool>
    + is_set_configured: bool
    + is_get_configured: bool
  }

  class "score::mw::com::impl::Configuration" {
    - service_types : const std::unordered_map<ServiceIdentifierType, ServiceTypeDeployment>
    - service_instances : const std::unordered_map<InstanceSpecifier, ServiceInstanceDeployment>
    - global_configuration_ : GlobalConfiguration
    - tracing_configuration_ : TracingConfiguration
    + Configuration(ServiceTypeDeployments service_types, ServiceInstanceDeployments service_instances, GlobalConfiguration global_configuration, TracingConfiguration tracing_configuration)
    + AddServiceTypeDeployment(ServiceIdentifierType, ServiceTypeDeployment) noexcept : ServiceTypeDeployment*
    + AddServiceInstanceDeployments(InstanceSpecifier, ServiceInstanceDeployment) noexcept : ServiceInstanceDeployment*
    + GetServiceTypes() const noexcept : const ServiceTypeDeployments&
    + GetServiceInstances() const noexcept : const ServiceInstanceDeployments&
    + GetGlobalConfiguration() const noexcept : const GlobalConfiguration&
    + GetTracingConfiguration() const noexcept : const TracingConfiguration&
  }

  class "score::mw::com::impl::LolaServiceTypeDeployment" {
    + serviceId: std::uint16
    + events: std::unordered_map<std::string, LolaElementTypeDeployment>
    + fields: std::unordered_map<std::string, LolaElementTypeDeployment>
    __
    LolaServiceTypeDeployment(service_id : std::uint16_t, events : EventIdMapping)
    ..
    <u>Notes:</u>
    This class has no invariants.
  }

  class "score::mw::com::impl::LolaElementTypeDeployment" {
    + id: std::uint8 const
    + LolaElementTypeDeployment(id : std::uint8 const)
  }

  class "score::mw::com::impl::ServiceTypeDeployment" {
    __
    + ServiceTypeDeployment(lola_deployment : const LolaServiceTypeDeployment)
    ..
    <u>Notes:</u>
    This class has no invariants.
  }

  class "score::mw::com::impl::TracingConfiguration" {
    + SetTracingEnabled(bool tracing_enabled) noexcept : void
    + SetApplicationInstanceID(std::string tracing_application_instance_id) noexcept : void
    + SetTracingTraceFilterConfigPath(std::string trace_filter_config_path) noexcept : void
    + IsTracingEnabled() const noexcept : bool
    + GetTracingFilterConfigPath() const noexcept : std::string_view noexcept
    + GetApplicationInstanceID() const noexcept : std::string_view
    + SetServiceElementTracingEnabled(tracing::ServiceElementIdentifier service_element_identifier, InstanceSpecifier instance_specifier) noexcept : void
    + IsServiceElementTracingEnabled(tracing::ServiceElementIdentifierView service_element_identifier_view, std::string_view instance_specifier) const noexcept : bool
    - service_element_tracing_enabled_map_ : std::unordered_map<tracing::ServiceElementIdentifier, std::unordered_set<InstanceSpecifier>>
    - tracing_config_ : tracing::TracingConfig
  }

  class "tracing::TracingConfig" {
    + enabled : bool
    + application_instance_id : std::string
    + trace_filter_config_path : std::string
  }

  class "GlobalConfiguration" {
    {static} - constexpr DEFAULT_MIN_NUM_MESSAGES_RX_QUEUE{10} : std::int32_t
    {static} - constexpr DEFAULT_MIN_NUM_MESSAGES_TX_QUEUE{20} : std::int32_t
    + GlobalConfiguration() noexcept
    + Configuration(const Configuration& other) = delete
    + GlobalConfiguration(GlobalConfiguration&& other) = default
    + operator=(GlobalConfiguration&& other) & = default
    + SetProcessAsilLevel(const QualityType) : void
    + SetReceiverMessageQueueSize(QualityType, std::int32_t) noexcept : void
    + SetSenderMessageQueueSize(std::int32_t queue_size) noexcept : void
    + SetShmSizeCalcMode(const ShmSizeCalculationMode) noexcept : void
    + GetReceiverMessageQueueSize(const QualityType) const noexcept : std::int32_t
    + GetSenderMessageQueueSize() const noexcept : std::int32_t
    + GetProcessAsilLevel() const : QualityType
    + GetShmSizeCalcMode() const noexcept : ShmSizeCalculationMode
    + GetApplicationId() const : score::cpp::optional<uid_t>
    + SetApplicationId(uid_t application_id) : void
    - process_asil_level_ : QualityType
    - message_rx_queue_size_qm : std::int32_t
    - message_rx_queue_size_b : std::int32_t
    - message_tx_queue_size_b : std::int32_t
    - shm_size_calc_mode_ : ShmSizeCalculationMode
    - application_id_ : score::cpp::optional<uid_t>
  }

  class "Global Functions" {
    + Parse(const std::string_view path) : Configuration
    + Parse(score::json::Any json) : Configuration
  }

}

class "score::mw::com::InstanceIdentifier" {
  + ToString() const : std::string_view
  - InstanceIdentifier(const ServiceInstanceDeployment&, const ServiceTypeDeployment&)
  - service_: ServiceIdentifierType* const
  - instance_deployment_: ServiceInstanceDeployment* const
  - type_deployment_ : ServiceTypeDeployment* const
}

class "score::mw::com::impl::HandleType" {
  identifier: score::mw::com::InstanceIdentifier
  additionalInformation: std::variant<>
}

class "<Proxy>::HandleType" {
  ..
  <u>Notes:</u>
  AUTOSAR requires each generated proxy class to provide a "HandleType" data type. From an instance of such a type, a proxy instance shall be constructible and afterwards being able to communicate with the service instance.
}

class "<Generated ara::com ServiceClass>" {
  {static} + serviceIdentifier : ServiceIdentifierType
  {static} + serviceContractVersionMajor : static std::uint32_t
  {static} + serviceContractVersionMinor : static std::uint32_t
  ..
  <u>Notes:</u>
  [SWS_CM_01010]
}

class "nlhomann::json" {
}

class "score::mw::com::impl::Runtime" {
  - configuration : Configuration const&
  __
  - Runtime(std::pair<Configuration&&, score::cpp::optional<tracing::TracingFilterConfig>&&> configs)
  {static} + Initialize() : void
  {static} + Initialize(const score::cpp::span<const score::StringLiteral> arguments) : void
  {static} + getInstance() : Runtime&
  + resolve(const InstanceSpecifier&): score::mw::com::InstanceIdentifierContainer
  + GetBindingRuntime(const BindingType binding) const : IRuntimeBinding*
  + GetServiceDiscovery() : IServiceDiscovery&
  + GetTracingFilterConfig() const : const tracing::ITracingFilterConfig*
  + GetTracingRuntime() const : tracing::ITracingRuntime*
  ..
  <u>Notes:</u>
  AUTOSAR SWS talks about a Runtime singleton in chapter 7.1.2 Design decisions without directly requiring it!
  So we embrace the idea here! The only thing which AUTOSAR really requires in the context of "runtime" is the following signature:
  static score::mw::com::runtime::ResolveInstanceIDs(InstanceSpecifier modelName);
}

"score::mw::com::impl::HandleType" o-- "score::mw::com::InstanceIdentifier"
"score::mw::com::ServiceIdentifierType" *-- "score::mw::com::ServiceVersionType"
"score::mw::com::impl::ServiceInstanceDeployment" *-- "QualityType"
"score::mw::com::impl::ServiceInstanceDeployment" *-- "score::mw::com::ServiceIdentifierType"
"score::mw::com::impl::ServiceInstanceDeployment" *-- "score::mw::com::impl::LolaServiceInstanceDeployment"
"score::mw::com::impl::ServiceInstanceDeployment" *-- "score::mw::com::impl::SomeIpServiceInstanceDeployment"
"score::mw::com::impl::LolaServiceInstanceDeployment" *-- "score::mw::com::impl::LolaEventInstanceDeployment" : 0..1
"score::mw::com::impl::LolaServiceInstanceDeployment" *-- "score::mw::com::impl::LolaFieldInstanceDeployment" : 0..1
"score::mw::com::impl::Configuration" *-- "score::mw::com::ServiceIdentifierType"
"score::mw::com::impl::Configuration" *-- "score::mw::com::impl::ServiceInstanceDeployment"
"score::mw::com::impl::Configuration" *-- "GlobalConfiguration"
"score::mw::com::impl::Configuration" *-- "score::mw::com::impl::TracingConfiguration"
"score::mw::com::impl::Configuration" *-- "score::mw::com::impl::ServiceTypeDeployment"
"score::mw::com::impl::LolaServiceTypeDeployment" *-- "score::mw::com::impl::LolaElementTypeDeployment" : 1..n
"score::mw::com::impl::TracingConfiguration" *-- "tracing::TracingConfig"
"score::mw::com::impl::Runtime" *-- "score::mw::com::impl::Configuration"
"score::mw::com::InstanceIdentifier" o-- "score::mw::com::impl::ServiceInstanceDeployment"
"score::mw::com::InstanceIdentifier" o-- "score::mw::com::impl::ServiceTypeDeployment"
"<Generated ara::com ServiceClass>" *-- "score::mw::com::ServiceIdentifierType"
"score::mw::com::impl::ServiceTypeDeployment" *-- "score::mw::com::impl::LolaServiceTypeDeployment"
"<Proxy>::HandleType" --> "score::mw::com::impl::HandleType": is realized by
"Global Functions" --> "score::mw::com::impl::Configuration" : creates
"Global Functions" --> "nlhomann::json" : uses
"score::mw::com::impl::Runtime" --> "Global Functions" : uses in\nInitialize

@enduml
