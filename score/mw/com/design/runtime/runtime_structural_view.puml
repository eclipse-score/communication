@startuml runtime_structural_view
title "Structural View Runtime"

interface "mw::com::impl::IRuntime" as IRuntime {
    +{abstract} resolve(const InstanceSpecifier&) : std::vector<InstanceIdentifier>
    +{abstract} getBindingRuntime(BindingType binding) : IRuntimeBinding*
}

enum BindingType {
    LoLa = 0
    Fake = 1
}

class "mw::com::impl::Runtime" as Runtime {
    -runtime_bindings_ : std::unordered_map<BindingType, std::unique_ptr<IRuntimeBinding>>
    +{static} Initialize() : void
    +{static} Initialize(int argc, score::StringLiteral argv) : void
    +{static} Initialize(std::string const&) : void
    +{static} getInstance() : Runtime&
    +Runtime(Configuration&& config)
    +resolve(const InstanceSpecifier&) : std::vector<InstanceIdentifier>
    +getBindingRuntime(BindingType binding) : IRuntimeBinding*
    ..
    <u>Notes:</u>
    Runtime is not copyable.
}

class "mw::com::impl::RuntimeMock" as RuntimeMock {
    +resolve(const InstanceSpecifier&): std::vector<InstanceIdentifier>
    +GetBindingRuntime(BindingType binding): IRuntimeBinding*
    ..
    Mock for unit-testing/mocking of Runtime func.
}

interface "mw::com::impl::IRuntimeBinding" as IRuntimeBinding {
    +{abstract} GetBindingType() : BindingType
    +{abstract} GetServiceDiscoveryClient() : IServiceDiscoveryClient&
    +{abstract} GetTracingRuntime() : tracing::ITracingRuntimeBinding*
}

class "mw::com::impl::RuntimeBindingFactory" as RuntimeBindingFactory << plumbing >> {
    +{static} CreateBindingRuntimes(configuration : Configuration&) : std::unordered_map<score::mw::com::impl::BindingType, std::unique_ptr<score::mw::com::impl::IRuntimeBinding>>
}

interface "mw::com::impl::lola::IRuntime" as LolaIRuntime {
    +{abstract} HasAsilBSupport() : bool
    +{abstract} GetLolaMessaging() : lola::IMessagePassingService&
    +{abstract} GetShmSizeCalculationMode() : ShmSizeCalculationMode
    +{abstract} GetRollbackSynchronization() : RollbackSynchronization&
    +{abstract} GetPid() : pid_t
    +{abstract} GetUid() : uid_t
}

class "mw::com::impl::lola:Runtime" as LolaRuntime {
    -lola_message_passing_control_ : lola::MessagePassingControl
    -lola_messaging_ : lola::MessagePassingFacade
    +GetLolaMessaging() : lola::IMessagePassingService&
    +HasAsilBSupport() : bool
    +GetMessagePassingCfg(const QualityType asil_level) : MessagePassingFacade::AsilSpecificCfg
    +GetRollbackSynchronization() : RollbackSynchronization&
}

class "mw::com::impl::lola:RuntimeMock" as LolaRuntimeMock {
    +GetLolaMessaging() : lola::IMessagePassingService&
    +HasAsilBSupport() : bool
}

IRuntime <|-- Runtime
IRuntime <|-- RuntimeMock
Runtime "1" *--> "0..n" IRuntimeBinding

IRuntimeBinding <|-- LolaIRuntime
LolaIRuntime <|-- LolaRuntime
LolaIRuntime <|-- LolaRuntimeMock

RuntimeBindingFactory ..> LolaRuntime : creates
Runtime ..> RuntimeBindingFactory : uses

@enduml
