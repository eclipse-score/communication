<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="15.0.0">
  <zoom_level>9</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1683</x>
      <y>1845</y>
      <w>369</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>mw::com::message_passing::ShortMessage
--
+ payload: std::uint64_t;
+ payload: MediumMessagePayload
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2016</x>
      <y>1305</y>
      <w>855</w>
      <h>261</h>
    </coordinates>
    <panel_attributes>template=ChannelTraits
mw::com::message_passing::Receiver
--
+Receiver(identifier : std::string_view, executor : concurrency::Executor&amp;, allowed_uids : const score::cpp::v1::span&lt;const uid_t&gt;,
                      receiver_config : const ReceiverConfig&amp;, allocator : const allocator_type&amp;)
+Register(MessageId id, ShortMessageReceivedCallback callback) : void
+Register(MessageId id, MediumMessageReceivedCallback callback) : void
+StartListening(): score::cpp::expected_blank&lt;score::os::Error&gt;

- MessageLoop(score::cpp::stop_token token, std::size_t thread,
               std::size_t max_threads) : void
- ExecuteMessageHandler(ShortMessage)
- ExecuteMessageHandler(MediumMessage)
--
- known_commands_: std::unordered_map&lt;MessageId, score::cpp::callback&lt;void(std::uint32_t)&gt; &gt;
--
Notes: Creates/Opens an OS specific underlying communication channel
and receives specified messages.
If a handler has been registered for a specific message, it is invoked.
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1476</x>
      <y>1305</y>
      <w>513</w>
      <h>243</h>
    </coordinates>
    <panel_attributes>template=ChannelTraits
mw::com::message_passing::Sender
--
+ Sender(identifier : std::string_view, token : const score::cpp::stop_token&amp;,
                const SenderConfig&amp;, logging_callback : LoggingCallback)
+ Send(ShortMessage): score::cpp::expected&lt;Error&gt;
+ Send(MediumMessage): score::cpp::expected&lt;Error&gt;
+ HasNonBlockingGuarantee() : bool
--
--
Notes: Opens an OS specific underlying communication
channel and transmits the specified message.

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>648</x>
      <y>1035</y>
      <w>423</w>
      <h>81</h>
    </coordinates>
    <panel_attributes>Notes:
SenderFactoryImpl creates
Sender  Object with ResmgrSenderTraits/MqueueSenderTraits
as ChannelTraits</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1719</x>
      <y>1539</y>
      <w>63</w>
      <h>324</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
sends</panel_attributes>
    <additional_attributes>10.0;340.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2025</x>
      <y>1557</y>
      <w>81</w>
      <h>306</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
receives</panel_attributes>
    <additional_attributes>10.0;320.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2133</x>
      <y>1611</y>
      <w>423</w>
      <h>117</h>
    </coordinates>
    <panel_attributes>/mw::com::message_passing::BaseMessage/
--
using MessageId std::uint8_t

+ id: std::uint8_t
+ sender_pid: pid_t //depending on OS will be transmitted
                    // explicit or implicit
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Relation</type>
    <coordinates>
      <x>2016</x>
      <y>1701</y>
      <w>189</w>
      <h>153</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>180;27;27;144</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2484</x>
      <y>1854</y>
      <w>369</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>mw::com::message_passing::MediumMessage
--
+ using MediumMessagePayload std::array&lt;uint8_t, 16&gt;;
+ payload: MediumMessagePayload
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Relation</type>
    <coordinates>
      <x>2376</x>
      <y>1701</y>
      <w>270</w>
      <h>162</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>27;27;261;153</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2160</x>
      <y>1080</y>
      <w>702</w>
      <h>126</h>
    </coordinates>
    <panel_attributes>/mw::com::message_passing::IReceiver/
--
using ShortMessageReceivedCallback = score::cpp::callback&lt;void(ShortMessagePayload const, pid_t const)&gt;
using MediumMessageReceivedCallback = score::cpp::callback&lt;void(MediumMessagePayload const, pid_t const)&gt;

/+Register(MessageId id, ShortMessageReceivedCallback callback) : void/
/+Register(MessageId id, MediumMessageReceivedCallback callback) : void/
/+StartListening(): score::cpp::expected_blank&lt;score::os::Error&gt;/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Relation</type>
    <coordinates>
      <x>2475</x>
      <y>1179</y>
      <w>36</w>
      <h>135</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>27;27;27;126</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1116</x>
      <y>1080</y>
      <w>864</w>
      <h>99</h>
    </coordinates>
    <panel_attributes>/mw::com::message_passing::ISender/
--
/+Send(ShortMessage): score::cpp::expected_blank&lt;score::os::Error&gt;/
/+Send(MediumMessage): score::cpp::expected_blank&lt;score::os::Error&gt;/
/+HasNonBlockingGuarantee() : bool/

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Relation</type>
    <coordinates>
      <x>1611</x>
      <y>1152</y>
      <w>44</w>
      <h>179</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>27;27;27;162</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2646</x>
      <y>1557</y>
      <w>81</w>
      <h>315</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
receives</panel_attributes>
    <additional_attributes>10.0;330.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1521</x>
      <y>1539</y>
      <w>1008</w>
      <h>477</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
sends</panel_attributes>
    <additional_attributes>1100.0;450.0;1100.0;510.0;10.0;510.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2340</x>
      <y>774</y>
      <w>612</w>
      <h>162</h>
    </coordinates>
    <panel_attributes>mw::com::message_passing::ReceiverFactory
--

_+Create(identifier : std::string_view , executor : concurrency::Executor&amp;,_
_    allowed_uids : const score::cpp::v1::span&lt;const uid_t&gt;, receiver_config : const ReceiverConfig&amp;_
_    score::cpp::pmr::memory_resource* memory_resource) :  score::cpp::pmr::unique_ptr&lt;IReceiver&gt;_
_+InjectReceiverMock(IReceiver* mock) : void_
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2475</x>
      <y>927</y>
      <w>72</w>
      <h>171</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
creates</panel_attributes>
    <additional_attributes>10.0;170.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1548</x>
      <y>864</y>
      <w>684</w>
      <h>117</h>
    </coordinates>
    <panel_attributes>mw::com::message_passing::SenderFactory
--
--
_+Create(identifier :std::string_view, token : const score::cpp::stop_token&amp;,_
_             const SenderConfig&amp;, logging_callback : LoggingCallback,_
_             memory_resource : score::cpp::pmr::memory_resource*) :  score::cpp::pmr::unique_ptr&lt;ISender&gt;_</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1890</x>
      <y>972</y>
      <w>72</w>
      <h>126</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
creates</panel_attributes>
    <additional_attributes>10.0;120.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>828</x>
      <y>864</y>
      <w>684</w>
      <h>117</h>
    </coordinates>
    <panel_attributes>mw::com::message_passing::SenderFactoryImpl
--
--
_+Create(identifier :std::string_view, token : const score::cpp::stop_token&amp;,_
_             const SenderConfig&amp;, logging_callback : LoggingCallback,_
_             memory_resource : score::cpp::pmr::memory_resource*) :  score::cpp::pmr::unique_ptr&lt;ISender&gt;_</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1188</x>
      <y>972</y>
      <w>72</w>
      <h>126</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
creates</panel_attributes>
    <additional_attributes>10.0;120.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3123</x>
      <y>774</y>
      <w>621</w>
      <h>162</h>
    </coordinates>
    <panel_attributes>mw::com::message_passing::ReceiverFactoryImpl
--

_+Create(identifier : std::string_view , executor : concurrency::Executor&amp;,_
_    allowed_uids : const score::cpp::v1::span&lt;const uid_t&gt;, receiver_config : const ReceiverConfig&amp;_
_    score::cpp::pmr::memory_resource* memory_resource) :  score::cpp::pmr::unique_ptr&lt;IReceiver&gt;_
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2853</x>
      <y>927</y>
      <w>531</w>
      <h>225</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
creates</panel_attributes>
    <additional_attributes>10.0;230.0;570.0;230.0;570.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>792</x>
      <y>1314</y>
      <w>666</w>
      <h>135</h>
    </coordinates>
    <panel_attributes>mw::com::message_passing::NonBlockingSender
--
--
+ NonBlockingSender(wrapped_sender : score::cpp::pmr::unique_ptr&lt;ISender&gt;,
    max_queue_size : const std::size_t,
    executor : concurrency::Executor&amp; )
+ Send(message : const message_passing::ShortMessage&amp;) : score::cpp::expected_blank&lt;score::os::Error&gt;
+ Send(message : const message_passing::MediumMessage&amp;): score::cpp::expected_blank&lt;score::os::Error&gt;
+ HasNonBlockingGuarantee() const : bool

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Relation</type>
    <coordinates>
      <x>1179</x>
      <y>1152</y>
      <w>44</w>
      <h>179</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>27;27;27;162</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1908</x>
      <y>0</y>
      <w>693</w>
      <h>99</h>
    </coordinates>
    <panel_attributes>mw::com::message_passing::QnxResourcePath
--
--
+ QnxResourcePath(identifier : const std::string_view)
+ c_str() : const char*
_+kMaxIdentifierLen : std::size_t_

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2367</x>
      <y>441</y>
      <w>846</w>
      <h>234</h>
    </coordinates>
    <panel_attributes>mw::com::message_passing::ResmgrReceiverTraits
--
_+kConcurrency : std::size_t_
_+INVALID_FILE_DESCRIPTOR : ResmgrReceiverState_

--
_+open_receiver(identifier : const std::string_view ,_
_    allowed_uids : const score::cpp::pmr::vector&lt;uid_t&gt;&amp;,_
_   max_number_message_in_queue : const std::int32_t) : score::cpp::expected&lt;file_descriptor_type, score::os::Error&gt;_
_+close_receiver(const file_descriptor_type file_descriptor,_
_    const std::string_view /*identifier*/) : void_
_+ stop_receive(const file_descriptor_type file_descriptor) : void_
_+receive_next(const file_descriptor_type file_descriptor,_
_    const std::size_t thread,_
_    ShortMessageProcessor fShort,_
_    MediumMessageProcessor fMedium) : score::cpp::expected&lt;bool, score::os::Error&gt;_

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>819</x>
      <y>522</y>
      <w>693</w>
      <h>153</h>
    </coordinates>
    <panel_attributes>mw::com::message_passing::ResmgrSenderTraits
--
_file_descriptor_type : int32_t_
--
_+try_open(identifier : const std::string_view) : score::cpp::expected&lt;file_descriptor_type, score::os::Error&gt;_
_+close_sender(file_descriptor : const file_descriptor_type) : void_
_+prepare_payload(const MessageFormat&amp; message) : MessageFormat&amp;_
_+try_send(_
_    file_descriptor : const file_descriptor_type,_
_    message : const MessageFormat&amp;) : score::cpp::expected_blank&lt;score::os::Error&gt;_
_+has_non_blocking_guarantee() : bool_

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>1260</x>
      <y>711</y>
      <w>567</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>Notes:
MessagePassing is a unidirectional 1:N communication mechanism.
The MessagePassing implementation should be optimized OS specific.

We will have a MQueue based implementation for POSIX/Linux.
We explicitly designed/optimized for small messages, because QNX has
a very efficient mechanism with QNX Pulses for transfer of such ultra
short messages. So for a QNX deployment we could implement ShortMessages
via Pulses.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>909</x>
      <y>666</y>
      <w>54</w>
      <h>216</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
uses</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;220.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>1926</x>
      <y>747</y>
      <w>360</w>
      <h>99</h>
    </coordinates>
    <panel_attributes>Notes:
Sender factory allows creations of both mocks
and production version of ISender objects
(uses SenderFactoryImpl internally to
create ISender Objects)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1458</x>
      <y>90</y>
      <w>819</w>
      <h>450</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
</panel_attributes>
    <additional_attributes>10.0;480.0;10.0;100.0;890.0;100.0;890.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2673</x>
      <y>216</y>
      <w>378</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>mw::com::message_passing::ResmgrReceiverState
--
+[kConcurrency] : dispatch_context_t*
+side_channel_coid_ : const std::int32_t

+message_queue_mutex_ : std::mutex
+message_queue_ : score::memory::PmrRingBuffer&lt;MessageData&gt;
+message_queue_owned_ : bool
+allowed_uids_ : const score::cpp::pmr::vector&lt;uid_t&gt;&amp;
--
+ResmgrReceiverState(max_message_queue_size : std::size_t,
    side_channel_coid : std::int32_t,
    allowed_uids : const score::cpp::pmr::vector&lt;uid_t&gt;&amp;)

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2718</x>
      <y>387</y>
      <w>27</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3204</x>
      <y>567</y>
      <w>198</w>
      <h>225</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
uses</panel_attributes>
    <additional_attributes>10.0;10.0;170.0;10.0;170.0;230.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>3564</x>
      <y>999</y>
      <w>468</w>
      <h>81</h>
    </coordinates>
    <panel_attributes>Notes:
ReceiverFactoryImpl creates
Receiver Object with ResmgrReceiverTraits/MqueueReceiverTraits
as ChannelTraits</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2250</x>
      <y>90</y>
      <w>1269</w>
      <h>702</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
</panel_attributes>
    <additional_attributes>1390.0;760.0;1390.0;100.0;10.0;100.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>864</y>
      <w>756</w>
      <h>162</h>
    </coordinates>
    <panel_attributes>mw::com::message_passing::MqueueSenderTraits
--
_file_descriptor_type : mqd_t_
--
_+try_open(identifier : const std::string_view) : score::cpp::expected&lt;file_descriptor_type, score::os::Error&gt;_
_+close_sender(file_descriptor : const file_descriptor_type) : void_
_+prepare_payload(const MessageFormat&amp; message) : message_passing::RawMessageBuffer&amp;_
_+try_send(_
_    file_descriptor : const file_descriptor_type,_
_    buffer : const score::mw::com::message_passing::RawMessageBuffer&amp;) : score::cpp::expected_blank&lt;score::os::Error&gt;_
_+has_non_blocking_guarantee() : bool_

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>747</x>
      <y>918</y>
      <w>99</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
uses</panel_attributes>
    <additional_attributes>10.0;20.0;90.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3735</x>
      <y>837</y>
      <w>189</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
uses</panel_attributes>
    <additional_attributes>190.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3906</x>
      <y>783</y>
      <w>720</w>
      <h>207</h>
    </coordinates>
    <panel_attributes>mw::com::message_passing::MqueueReceiverTraits
--
_file_descriptor_type : INVALID_FILE_DESCRIPTOR_
--
_+open_receiver(identifier : const std::string_view ,_
_    allowed_uids : const score::cpp::pmr::vector&lt;uid_t&gt;&amp;,_
_   max_number_message_in_queue : const std::int32_t) : score::cpp::expected&lt;file_descriptor_type, score::os::Error&gt;_
_+close_receiver(const file_descriptor_type file_descriptor,_
_    const std::string_view identifier) : void_
_+ stop_receive(const file_descriptor_type file_descriptor) : void_
_+receive_next(const file_descriptor_type file_descriptor,_
_    const std::size_t thread,_
_    ShortMessageProcessor fShort,_
_    MediumMessageProcessor fMedium) : score::cpp::expected&lt;bool, score::os::Error&gt;_

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1440</x>
      <y>972</y>
      <w>135</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
uses</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0;130.0;60.0;130.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2979</x>
      <y>1314</y>
      <w>441</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>ReceiverConfig
--
+max_number_message_in_queue : std::int32_t
+message_loop_delay : std::optional&lt;std::chrono::milliseconds&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>792</x>
      <y>1476</y>
      <w>531</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>SenderConfig
--
+max_numbers_of_retry : std::int32_t
+send_retry_delay : std::chrono::milliseconds
+connect_retry_delay : std::chrono::milliseconds</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
